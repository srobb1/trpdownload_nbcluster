<?php
/**
 * @file
 * Provides some examples showing how module developers could use the
 * Tripal Download API.
 */

/**
 * Implements hook_register_trpdownload_type().
 */
function trpdownload_nbcluster_register_trpdownload_type() {
  $types = array();

  $types['nbcluster_csv'] = array(
    'type_name' => 'NB Cluster CSV',
    'format' => 'Comma-separated Values',
    'functions' => array(
      'generate_file' => 'trpdownload_nbcluster_csv_generate_file',
    )
  );
  $types['nbcluster_fasta'] = array(
    'type_name' => 'NB Cluster FASTA',
    'format' => 'FASTA',
    'functions' => array(
      'generate_file' => 'trpdownload_nbcluster_fasta_generate_file',
    ),
  );

  return $types;
}

/**
 * Implements hook_menu().
 */
function trpdownload_nbcluster_menu() {
  $items = array();

  $items['chado/nbcluster/csv'] = array(
    'title' => 'Download NB Cluster: CSV',
    'page callback' => 'trpdownload_download_page',
    'page arguments' => array('nbcluster_csv', 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,);

  $items['chado/nbcluster/fasta'] = array(
    'title' => 'Download NB Cluster: FASTA',
    'page callback' => 'trpdownload_download_page',
    'page arguments' => array('nbcluster_fasta', 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,);
  
  return $items;
}

/**
 * Generates a file listing feature in CSV.
 *
 * @param $variables
 *   An associative array of parameters including:
 *     - q: all the query paramters.
 *     - site_safe_name: a sanitized version of your site name for use in variables & filenames.
 *     - type_info: an array of info for the download type.
 *     - suffix: the file format suffix.
 *     - filename: the filename of the file to generate not including path.
 *     - fullpath: the full path and filename of the file to generate.
 *     - format_name: a human-readable description of the format.
 * @param $job_id
 *   The ID of the tripal job executing this function ;-).
 */
function trpdownload_nbcluster_csv_generate_file($variables, $job_id = NULL) {

  // Create the file and ready it for writting to.
  $filepath = variable_get('trpdownload_fullpath', '') . $variables['filename'];
  drush_print("File: " . $filepath);
  $FILE = fopen($filepath, 'w') or die ('Uable to create file to write to');


  // Add header to the file.
  fputcsv($FILE, array(
    'SMED ID',
    'Name'
  ))  ;

  $anz_uniquename = '';
  if(array_key_exists("anz-uniquename",$variables["q"])){
    $anz_uniquename = trim($variables["q"]["anz-uniquename"]);
  }

  $query = "SELECT DISTINCT F.uniquename ,F.name FROM {feature} F , {CVTERM} CVT, {FEATURE_EXPRESSION} FE, {EXPRESSION} E, {EXPRESSION_PUB} EP, {PUB} P 
WHERE F.type_id = CVT.cvterm_id 
AND CVT.name = 'transcript' 
AND F.feature_id = FE.feature_id 
AND FE.expression_id = E.expression_id 
AND E.expression_id = EP.expression_id 
AND EP.pub_id = p.pub_id 
AND p.title = 'Prospectively Isolated Tetraspanin+ Neoblasts Are Adult Pluripotent Stem Cells Underlying Planaria Regeneration.'  

";
  if (!empty($anz_uniquename)){
   $in_array = preg_split('/[\s,+]+/',$anz_uniquename);
   $in_string = join("|",$in_array) ;
   $where_anz_id = " 
AND F.uniquename similar to '%($in_string)%'";
   $query .= $where_anz_id;
  }


  $nbclusters = chado_query($query);//,$q_args);
drush_print($query);

  // for tracking progress.
  $count_query = preg_replace('/SELECT.*FROM/s', 'SELECT count(*) as num_lines FROM', $query);
  $total_lines = chado_query($count_query)->fetchField();
  //$total_lines = chado_query($count_query, array(":feature_id" => $feature_id))->fetchField();
//  drush_print('Total Lines: '.$total_lines);

  // For each db result write a CSV line to the file.
  $cur_line = 0;
  foreach ($nbclusters as $row) {

    // Output the progress.
    $cur_line++;
    $percent = $cur_line/$total_lines * 100;
    if ($percent%5 == 0) {
      drush_print(round($percent,2).'% Complete.');
      db_query('UPDATE {tripal_jobs} SET progress=:percent WHERE job_id=:id',
        array(':percent' => round($percent), ':id' => $job_id));
    }

    // Don't forget to write the line to the file ;-).
    fputcsv($FILE, (array)$row );
  }

  // Finally, close the file.
  fclose($FILE);
}
function trpdownload_nbcluster_fasta_generate_file($variables, $job_id = NULL) {

  // Create the file and ready it for writting to.
  $filepath = variable_get('trpdownload_fullpath', '') . $variables['filename'];
  drush_print("File: " . $filepath);
  $FILE = fopen($filepath, 'w') or die ('Uable to create file to write to');


  $anz_uniquename = '';
  if(array_key_exists("anz-uniquename",$variables["q"])){
    $anz_uniquename = trim($variables["q"]["anz-uniquename"]);
  }

  $query = "SELECT DISTINCT F.uniquename ,F.name, F.residues FROM {feature} F , {CVTERM} CVT, {FEATURE_EXPRESSION} FE, {EXPRESSION} E, {EXPRESSION_PUB} EP, {PUB} P
  WHERE F.type_id = CVT.cvterm_id
  AND CVT.name = 'transcript'
  AND F.feature_id = FE.feature_id
  AND FE.expression_id = E.expression_id
  AND E.expression_id = EP.expression_id
  AND EP.pub_id = p.pub_id
  AND p.title = 'Prospectively Isolated Tetraspanin+ Neoblasts Are Adult Pluripotent Stem Cells Underlying Planaria Regeneration.'

";
  if (!empty($anz_uniquename)){
   $in_array = preg_split('/[\s,+]+/',$anz_uniquename);
   $in_string = join("|",$in_array) ;
    $where_anz_id = "
  AND F.uniquename similar to '%($in_string)%'";

   $query .= $where_anz_id;
  }


  $nbclusters = chado_query($query);//,$q_args);
  // for tracking progress.
  $count_query = preg_replace('/SELECT.*FROM/s', 'SELECT count(*) as num_lines FROM', $query);
  $total_lines = chado_query($count_query)->fetchField();
  //$total_lines = chado_query($count_query, array(":feature_id" => $feature_id))->fetchField();
//  drush_print('Total Lines: '.$total_lines);

  // For each db result write a CSV line to the file.
  $cur_line = 0;
  foreach ($nbclusters as $row) {
  $fasta_record = ">$row->uniquename $row->name\n$row->residues\n";
    // Output the progress.
    $cur_line++;
    $percent = $cur_line/$total_lines * 100;
    if ($percent%5 == 0) {
      drush_print(round($percent,2).'% Complete.');
      db_query('UPDATE {tripal_jobs} SET progress=:percent WHERE job_id=:id',
        array(':percent' => round($percent), ':id' => $job_id));
    }

    // Don't forget to write the line to the file ;-).
    fwrite($FILE, $fasta_record);
  }

  // Finally, close the file.
  fclose($FILE);
}
